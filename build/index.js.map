{"version":3,"file":"index.js","sources":["../src/Shader.js","../src/Input.js","../src/entities/MapNode.js","../src/entities/Map.js","../shaders/map.vert","../shaders/map.frag","../src/entities/weapons/Sword.js","../src/entities/Gem.js","../src/entities/GemCollection.js","../src/screens/VictoryScreen.js","../src/entities/Heart.js","../src/entities/HeartCollection.js","../src/screens/GameOverScreen.js","../src/entities/Player.js","../src/entities/LightCone.js","../shaders/alpha.vert","../shaders/alpha.frag","../src/entities/enemies/Snake.js","../src/entities/enemies/SnakeCollection.js","../src/entities/collectibles/CollectibleGemCollection.js","../src/entities/collectibles/CollectibleHeartCollection.js","../src/entities/Exit.js","../src/FogOfWar.js","../shaders/texture.vert","../shaders/texture.frag","../src/PostProcessor.js","../shaders/widen.vert","../shaders/widen.frag","../src/ParticleSystem.js","../shaders/particle.vert","../shaders/particle.frag","../src/entities/texts/NeonTitle.js","../shaders/title.vert","../shaders/title.frag","../src/entities/texts/DungeonTitle.js","../src/screens/TitleScreen.js","../src/Game.js","../src/index.js","../shaders/basic.vert","../shaders/basic.frag"],"sourcesContent":["function componentCount(type) {\n  switch (type) {\n  case 'float':\n    return 1;\n  case 'vec2':\n    return 2;\n  case 'vec3':\n    return 3;\n  case 'vec4':\n    return 4;\n  case 'mat3':\n    return 9;\n  case 'mat4':\n    return 16;\n  }\n}\n\nfunction parseShader(combinedShaders, pattern) {\n  let matchResult;\n  const result = [];\n\n  while ((matchResult = pattern.exec(combinedShaders)) !== null) {\n    result.push(\n      { name: matchResult[3], components: componentCount(matchResult[2]) }\n    );\n  }\n\n  return result;\n}\n\nexport default class Shader {\n  constructor(gl, vertexShaderSource, fragmentShaderSource) {\n    const combinedShaders = `${vertexShaderSource}\\n${fragmentShaderSource}`;\n\n    this.uniforms = parseShader(combinedShaders,\n      /uniform\\s+(\\w+\\s+)*(\\w+)\\s+(\\w+)\\s*;/g);\n    this.attributes = parseShader(combinedShaders,\n      /attribute\\s+(\\w+\\s+)*(\\w+)\\s+(\\w+)\\s*;/g);\n\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, vertexShaderSource);\n    gl.compileShader(vertexShader);\n\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, fragmentShaderSource);\n    gl.compileShader(fragmentShader);\n\n    this.program = gl.createProgram();\n    gl.attachShader(this.program, vertexShader);\n    gl.attachShader(this.program, fragmentShader);\n    gl.linkProgram(this.program);\n\n    for (const uniform of this.uniforms) {\n      this[uniform.name] = gl.getUniformLocation(this.program, uniform.name);\n    }\n\n    for (const attribute of this.attributes) {\n      this[attribute.name] = gl.getAttribLocation(this.program, attribute.name);\n    }\n\n    this.vertexSize = this.attributes\n      .reduce((acc, attribute) => acc + attribute.components, 0);\n  }\n\n  use(gl) {\n    gl.useProgram(this.program);\n\n    let offset = 0;\n\n    for (const attribute of this.attributes) {\n      gl.enableVertexAttribArray(this[attribute.name]);\n      gl.vertexAttribPointer(this[attribute.name], attribute.components,\n        gl.FLOAT, false, this.vertexSize * 4, offset);\n\n      offset += attribute.components * 4;\n    }\n  }\n}\n","export default class Input {\n  constructor() {\n    this.UP = 1;\n    this.DOWN = 2;\n    this.LEFT = 4;\n    this.RIGHT = 8;\n    this.ACTION = 16;\n\n    this.pressed = 0;\n    this.lastPressed = 0;\n\n    this.justPressed = 0;\n    this.justReleased = 0;\n  }\n\n  press(key) {\n    this.pressed |= key;\n  }\n\n  release(key) {\n    this.pressed &= ~key;\n  }\n\n  isPressed(key) {\n    return (this.pressed & key) === key;\n  }\n\n  wasJustPressed(key) {\n    return (this.justPressed & key) === key;\n  }\n\n  wasJustReleased(key) {\n    return (this.justReleased & key) === key;\n  }\n\n  update() {\n    this.justPressed = this.pressed & ~this.lastPressed;\n    this.justReleased = this.lastPressed & ~this.pressed;\n\n    this.lastPressed = this.pressed;\n  }\n}\n","const MIN_SIZE = 16;\nconst MIN_ROOM_OFFSET = 1;\nconst MIN_ROOM_SIZE = 10;\n\nexport default class MapNode {\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n\n    this.snakes = 0;\n    this.containsGem = false;\n    this.containsHeart = false;\n    this.containsExit = false;\n  }\n\n  isLeaf() {\n    return !this.childA && !this.childB;\n  }\n\n  split() {\n    if (!this.isLeaf() || this.w < MIN_SIZE * 2 || this.h < MIN_SIZE * 2) {\n      this.createRoom();\n      return false;\n    }\n\n    if (this.w / this.h <= 0.75) {\n      this.splitHorizontally();\n    } else if (this.h / this.w <= 0.75) {\n      this.splitVertically();\n    } else if (Math.random() < 0.5) {\n      this.splitHorizontally();\n    } else {\n      this.splitVertically();\n    }\n\n    this.childA.split();\n    this.childB.split();\n  }\n\n  splitHorizontally() {\n    const size = Math.round(MIN_SIZE + Math.random() * (this.h - MIN_SIZE * 2));\n\n    this.childA = new MapNode(this.x, this.y, this.w, size);\n    this.childB = new MapNode(this.x, this.y + size, this.w, this.h - size);\n  }\n\n  splitVertically() {\n    const size = Math.round(MIN_SIZE + Math.random() * (this.w - MIN_SIZE * 2));\n\n    this.childA = new MapNode(this.x, this.y, size, this.h);\n    this.childB = new MapNode(this.x + size, this.y, this.w - size, this.h);\n  }\n\n  createRoom() {\n    this.roomW = Math.round(MIN_ROOM_SIZE + Math.random() *\n      (this.w - 2 * MIN_ROOM_OFFSET - MIN_ROOM_SIZE));\n    this.roomH = Math.round(MIN_ROOM_SIZE + Math.random() *\n      (this.h - 2 * MIN_ROOM_OFFSET - MIN_ROOM_SIZE));\n    this.roomX = Math.round(this.x + MIN_ROOM_OFFSET + Math.random() *\n      (this.w - this.roomW - 2 * MIN_ROOM_OFFSET));\n    this.roomY = Math.round(this.y + MIN_ROOM_OFFSET + Math.random() *\n      (this.h - this.roomH - 2 * MIN_ROOM_OFFSET));\n  }\n\n  leafCount() {\n    if (this.isLeaf()) {\n      return 1;\n    }\n\n    return this.childA.leafCount() + this.childB.leafCount();\n  }\n\n  visitLeaves(f) {\n    if (this.isLeaf()) {\n      return f(this);\n    }\n\n    this.childA.visitLeaves(f);\n    this.childB.visitLeaves(f);\n  }\n\n  visitLeafPairs(f) {\n    if (this.isLeaf()) {\n      return this;\n    }\n\n    const leafA = this.childA.visitLeafPairs(f);\n    const leafB = this.childB.visitLeafPairs(f);\n\n    f(leafA, leafB);\n\n    return Math.random() < 0.5 ? leafA : leafB;\n  }\n\n  getRandomLeaf() {\n    if (this.isLeaf()) {\n      return this;\n    }\n\n    return Math.random() < 0.5 ? this.childA.getRandomLeaf()\n      : this.childB.getRandomLeaf();\n  }\n}\n","import vertexShaderSource from '../../shaders/map.vert';\nimport fragmentShaderSource from '../../shaders/map.frag';\nimport Shader from '../Shader';\nimport MapNode from './MapNode';\n\nconst TILE_SIZE = 10;\nconst CORRIDOR_SIZE = 5;\n\nexport default class Map {\n  constructor(gl, width, height) {\n    this.width = width;\n    this.height = height;\n\n    this.gridWidth = Math.ceil(this.width / TILE_SIZE);\n    this.gridHeight = Math.ceil(this.height / TILE_SIZE);\n\n    this.root = new MapNode(0, 0, this.gridWidth, this.gridHeight);\n    this.root.split();\n\n    this.grid = new Uint8Array(this.gridWidth * this.gridHeight);\n\n    const vertices = new Float32Array([\n      0.0, 0.0, 0.0, 0.0,\n      this.width - 1.0, 0.0, 1.0, 0.0,\n      0.0, this.height - 1.0, 0.0, 1.0,\n      this.width - 1.0, this.height - 1.0, 1.0, 1.0\n    ]);\n\n    const indices = new Uint16Array([\n      0, 2, 1,\n      1, 2, 3\n    ]);\n\n    this.root.visitLeaves(leaf => {\n      for (let y = leaf.roomY; y < leaf.roomY + leaf.roomH; y++) {\n        for (let x = leaf.roomX; x < leaf.roomX + leaf.roomW; x++) {\n          this.grid[y * this.gridWidth + x] = 0xFF;\n        }\n      }\n    });\n\n    this.root.visitLeafPairs((leafA, leafB) => {\n      const aCenterX = Math.floor(leafA.roomX + leafA.roomW / 2);\n      const aCenterY = Math.floor(leafA.roomY + leafA.roomH / 2);\n      const bCenterX = Math.floor(leafB.roomX + leafB.roomW / 2);\n      const bCenterY = Math.floor(leafB.roomY + leafB.roomH / 2);\n\n      const corridorHalf = Math.floor(CORRIDOR_SIZE / 2);\n\n      for (let y = aCenterY; y !== bCenterY;\n        y += Math.sign(bCenterY - aCenterY)) {\n        for (let x = -corridorHalf; x <= corridorHalf; x++) {\n          this.grid[y * this.gridWidth + aCenterX + x] = 0xFF;\n        }\n      }\n\n      for (let x = aCenterX; x !== bCenterX;\n        x += Math.sign(bCenterX - aCenterX)) {\n        for (let y = -corridorHalf; y <= corridorHalf; y++) {\n          this.grid[(bCenterY + y) * this.gridWidth + x] = 0xFF;\n        }\n      }\n    });\n\n    this.texture = gl.createTexture();\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.ALPHA, this.gridWidth, this.gridHeight,\n      0, gl.ALPHA, gl.UNSIGNED_BYTE, this.grid);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    this.vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n    this.indexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);\n\n    this.shader = new Shader(gl, vertexShaderSource, fragmentShaderSource);\n  }\n\n  draw(gl, projection, view, wallsOnly) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n\n    this.shader.use(gl);\n\n    gl.uniformMatrix4fv(this.shader.projection, false, projection);\n    gl.uniformMatrix4fv(this.shader.view, false, view);\n\n    if (wallsOnly) {\n      gl.uniform4f(this.shader.wallColor, 0.0, 0.0, 1.0, 1.0);\n      gl.uniform4f(this.shader.roomColor, 0.0, 0.0, 0.0, 0.0);\n    } else {\n      gl.uniform4f(this.shader.wallColor, 0.0, 0.0, 0.0, 0.0);\n      gl.uniform4f(this.shader.roomColor, 0.07, 0.07, 0.07, 1.0);\n    }\n\n    gl.uniform1i(this.shader.sampler, 0);\n    gl.uniform2f(this.shader.quadSize, this.width, this.height);\n\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n\n    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n  }\n\n  tileAt(x, y) {\n    const tile = Math.floor(y / TILE_SIZE) * this.gridWidth +\n      Math.floor(x / TILE_SIZE);\n    return this.grid[tile];\n  }\n\n  getWallDistance(x, y, dirX, dirY) {\n    dirX = dirX === 0 ? 0.00001 : dirX;\n    dirY = dirY === 0 ? 0.00001 : dirY;\n\n    let tileX = 0;\n    let tileY = 0;\n    let offset = 0;\n\n    do {\n      tileX = Math.floor((x + dirX * offset) / TILE_SIZE) * TILE_SIZE;\n      tileY = Math.floor((y + dirY * offset) / TILE_SIZE) * TILE_SIZE;\n      offset += TILE_SIZE / 10;\n    } while (this.tileAt(tileX, tileY) !== 0 && offset < 1000);\n\n    let ix = 0;\n    let iy = 0;\n\n    let distTop = (tileY - y) / dirY;\n    ix = x + dirX * distTop;\n    distTop = (ix >= tileX && ix <= tileX + TILE_SIZE) ? distTop : 1000;\n\n    let distBottom = (tileY + TILE_SIZE - y) / dirY;\n    ix = x + dirX * distBottom;\n    distBottom = (ix >= tileX && ix <= tileX + TILE_SIZE) ? distBottom : 1000;\n\n    let distLeft = (tileX - x) / dirX;\n    iy = y + dirY * distLeft;\n    distLeft = (iy >= tileY && iy <= tileY + TILE_SIZE) ? distLeft : 1000;\n\n    let distRight = (tileX + TILE_SIZE - x) / dirX;\n    iy = y + dirY * distRight;\n    distRight = (iy >= tileY && iy <= tileY + TILE_SIZE) ? distRight : 1000;\n\n    return Math.min(distTop, distBottom, distLeft, distRight);\n  }\n}\n","uniform mediump mat4 projection;\nuniform mediump mat4 view;\n\nattribute vec2 vertexPosition;\nattribute vec2 vertexTexCoord;\n\nvarying highp vec2 texCoord;\n\nvoid main() {\n  gl_Position = projection * view * vec4(vertexPosition, 0.0, 1.0);\n  texCoord = vertexTexCoord;\n}\n","precision highp float;\n\nconst float tolerance = 0.2;\n\nuniform sampler2D sampler;\nuniform mediump vec4 wallColor;\nuniform mediump vec4 roomColor;\nuniform mediump vec2 quadSize;\n\nvarying highp vec2 texCoord;\n\nvoid main() {\n  vec2 quadStep = 1.0 / quadSize;\n\n  float neighbors = 0.0;\n  neighbors += 1.0 - step(tolerance,\n    texture2D(sampler, vec2(texCoord.x - quadStep.x, texCoord.y)).a);\n  neighbors += 1.0 - step(tolerance,\n    texture2D(sampler, vec2(texCoord.x + quadStep.x, texCoord.y)).a);\n  neighbors += 1.0 - step(tolerance,\n    texture2D(sampler, vec2(texCoord.x, texCoord.y - quadStep.y)).a);\n  neighbors += 1.0 - step(tolerance,\n    texture2D(sampler, vec2(texCoord.x, texCoord.y + quadStep.y)).a);\n\n  float current = step(tolerance,\n    texture2D(sampler, vec2(texCoord.x, texCoord.y)).a);\n\n  float wall = neighbors * current;\n\n  gl_FragColor = wallColor * wall + roomColor * current;\n}\n","export default class Sword {\n  constructor(gl, shader, player) {\n    const vertices = new Float32Array(3 * shader.vertexSize);\n\n    let vertexIndex = 0;\n\n    vertices[vertexIndex++] = 3.0;\n    vertices[vertexIndex++] = 6.0;\n\n    vertices[vertexIndex++] = 20.0;\n    vertices[vertexIndex++] = 0.0;\n\n    vertices[vertexIndex++] = 6.0;\n    vertices[vertexIndex++] = 0.0;\n\n    this.vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n    this.x = player.x;\n    this.y = player.y;\n\n    this.enemiesHit = 0;\n\n    this.angle = player.angle + Math.PI / 2.0;\n\n    this.model = new Float32Array([\n      1.0, 0.0, 0.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      this.x, this.y, 0.0, 1.0\n    ]);\n  }\n\n  update(deltaTime, game) {\n    this.x = game.player.x;\n    this.y = game.player.y;\n\n    if (this.swingTimer > 0) {\n      this.swingTimer -= deltaTime;\n\n      this.angle = this.swingBaseAngle - ((150.0 - this.swingTimer) / 150.0) *\n        Math.PI * 2.0;\n\n      const endX = this.x + Math.cos(this.angle) * 20.0;\n      const endY = this.y + Math.sin(this.angle) * 20.0;\n\n      const particleAngle = this.angle + Math.PI / 2.0;\n\n      for (let i = 0; i < 2; i++) {\n        const particleDirX = Math.cos(particleAngle) * Math.random() * 0.1;\n        const particleDirY = Math.sin(particleAngle) * Math.random() * 0.1;\n\n        game.particleSystem.emit(game.gl, endX, endY,\n          particleDirX, particleDirY, 1.0, 1.0, 0.0, 1);\n      }\n\n      for (const snake of game.snakeCollection.snakes) {\n        if (!snake.alive || this.enemiesHit >= 2) {\n          continue;\n        }\n\n        const dist1X = snake.x - this.x;\n        const dist1Y = snake.y - this.y;\n\n        const dist1 = Math.sqrt(dist1X * dist1X + dist1Y * dist1Y);\n\n        const dist2X = snake.x - endX;\n        const dist2Y = snake.y - endY;\n\n        const dist2 = Math.sqrt(dist2X * dist2X + dist2Y * dist2Y);\n\n        if (dist1 <= 25.0 && dist2 <= 25.0) {\n          this.enemiesHit++;\n\n          snake.alive = false;\n\n          game.particleSystem.emitRandom(game.gl, this.x, this.y, 0.01, 0.2,\n            1.0, 0.0, 1.0, 50);\n        }\n      }\n    } else {\n      this.angle = game.player.angle + Math.PI;\n    }\n\n    this.model[0] = Math.cos(this.angle);\n    this.model[1] = Math.sin(this.angle);\n    this.model[4] = -Math.sin(this.angle);\n    this.model[5] = Math.cos(this.angle);\n\n    this.model[12] = this.x;\n    this.model[13] = this.y;\n  }\n\n  swing() {\n    if (this.swingTimer > 0) {\n      return;\n    }\n\n    this.swingTimer = 150;\n    this.swingBaseAngle = this.angle;\n    this.enemiesHit = 0;\n  }\n\n  draw(gl, shader) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\n    shader.use(gl);\n\n    gl.uniformMatrix4fv(shader.model, false, this.model);\n    gl.uniform4f(shader.color, 1.0, 1.0, 0.0, 1.0);\n\n    gl.drawArrays(gl.TRIANGLES, 0, 3);\n  }\n}\n","export default class Gem {\n  constructor(x, y, scale) {\n    this.x = x;\n    this.y = y;\n\n    this.model = new Float32Array([\n      scale, 0.0, 0.0, 0.0,\n      0.0, scale, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      x, y, 0.0, 1.0\n    ]);\n\n    this.collected = false;\n  }\n\n  update(game) {\n    if (this.collected) {\n      return;\n    }\n\n    const distX = game.player.x - this.x;\n    const distY = game.player.y - this.y;\n\n    const dist = Math.sqrt(distX * distX + distY * distY);\n\n    if (dist <= 20.0) {\n      game.player.collectGem(game, this);\n      this.collected = true;\n    }\n  }\n\n  draw(gl, shader, filled) {\n    if (this.collected) {\n      return;\n    }\n\n    gl.uniformMatrix4fv(shader.model, false, this.model);\n\n    if (filled) {\n      gl.drawElements(gl.TRIANGLES, 24, gl.UNSIGNED_SHORT, 0);\n    } else {\n      gl.drawElements(gl.LINES, 30, gl.UNSIGNED_SHORT,\n        Uint16Array.BYTES_PER_ELEMENT * 24);\n    }\n  }\n}\n","import Gem from './Gem';\n\nexport default class GemCollection {\n  constructor(gl, shader, x, y, count, scale) {\n    const vertices = new Float32Array([\n      -20.0, -7.0,\n      -13.0, -18.0,\n      -7.0, -7.0,\n      0.0, -18.0,\n      6.0, -7.0,\n      13.0, -18.0,\n      19.0, -7.0,\n      0.0, 18.0\n    ]);\n\n    const indices = new Uint16Array([\n      1, 0, 2,\n      3, 1, 2,\n      3, 2, 4,\n      5, 3, 4,\n      5, 4, 6,\n      2, 0, 7,\n      4, 2, 7,\n      6, 4, 7,\n\n      0, 1,\n      1, 2,\n      0, 2,\n      1, 3,\n      2, 3,\n      2, 4,\n      3, 5,\n      3, 4,\n      4, 5,\n      5, 6,\n      4, 6,\n      0, 7,\n      2, 7,\n      4, 7,\n      6, 7\n    ]);\n\n    this.vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n    this.indexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);\n\n    this.view = new Float32Array([\n      1.0, 0.0, 0.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      0.0, 0.0, 0.0, 1.0\n    ]);\n\n    this.gems = [];\n\n    for (let i = 0; i < count; i++) {\n      this.gems.push(new Gem(x + i * 50.0, y, scale));\n    }\n  }\n\n  draw(gl, shader, player) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n\n    shader.use(gl);\n\n    gl.uniformMatrix4fv(shader.view, false, this.view);\n    gl.uniform4f(shader.color, 1.0, 0.0, 1.0, 1.0);\n\n    if (player) {\n      const lastFlashing = player.gemTimer <= 0 || player.gemVisible;\n\n      for (let i = 0; i < this.gems.length; i++) {\n        this.gems[i].draw(gl, shader, player.gems > i + 1 ||\n          (lastFlashing && i === player.gems - 1));\n      }\n    } else {\n      for (const gem of this.gems) {\n        gem.draw(gl, shader, false);\n      }\n    }\n  }\n}\n","import GemCollection from '../entities/GemCollection';\n\nexport default class VictoryScreen {\n  constructor(gl, shader) {\n    this.gemCollection = new GemCollection(gl, shader, 640.0, 330.0, 1, 12.0);\n\n    this.particleTimer = 100 + Math.random() * 1000;\n\n    this.actionTimer = 2000;\n  }\n\n  update(deltaTime, game) {\n    this.actionTimer -= deltaTime;\n\n    if (game.input.wasJustReleased(game.input.ACTION) && this.actionTimer < 0) {\n      game.reset();\n      game.activeScreen = null;\n\n      return;\n    }\n\n    this.particleTimer -= deltaTime;\n\n    if (this.particleTimer <= 0) {\n      this.particleTimer = 100 + Math.random() * 1000;\n      game.particleSystem.emitRandom(game.gl,\n        Math.random() * 1280, Math.random() * 720, 0.01, 0.2,\n        1.0, 0.0, 1.0, 50);\n    }\n  }\n\n  draw(gl, textContext, shader, projection, view) {\n    shader.use(gl);\n\n    gl.uniformMatrix4fv(shader.projection, false, projection);\n\n    this.gemCollection.draw(gl, shader, null);\n\n    textContext.fillText('VICTORY!', 640, 50);\n    textContext.fillText('THANKS FOR PLAYING!', 640, 700);\n  }\n}\n","export default class Heart {\n  constructor(heartCollection, x, y, scale) {\n    this.x = x;\n    this.y = y;\n    this.heartCollection = heartCollection;\n\n    this.model = new Float32Array([\n      scale, 0.0, 0.0, 0.0,\n      0.0, scale, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      x, y, 0.0, 1.0\n    ]);\n\n    this.collected = false;\n  }\n\n  update(game) {\n    if (this.collected) {\n      return;\n    }\n\n    const distX = game.player.x - this.x;\n    const distY = game.player.y - this.y;\n\n    const dist = Math.sqrt(distX * distX + distY * distY);\n\n    if (dist <= 20.0) {\n      game.player.collectHeart(game, this);\n      this.collected = true;\n    }\n  }\n\n  draw(gl, shader, filled) {\n    if (this.collected) {\n      return;\n    }\n\n    gl.uniformMatrix4fv(shader.model, false, this.model);\n\n    if (filled) {\n      gl.drawArrays(gl.TRIANGLE_FAN, 0, this.heartCollection.HEART_SEGMENTS);\n    } else {\n      gl.drawArrays(gl.LINE_STRIP, 1, this.heartCollection.HEART_SEGMENTS - 1);\n    }\n  }\n}\n","import Heart from './Heart';\n\nconst HEART_SEGMENTS = 101;\nconst HEART_RADIUS = 10;\n\nexport default class HeartCollection {\n  constructor(gl, shader, x, y, count, scale) {\n    this.HEART_SEGMENTS = HEART_SEGMENTS;\n\n    const vertices = new Float32Array(HEART_SEGMENTS * shader.vertexSize);\n\n    let vertexIndex = 0;\n\n    vertices[vertexIndex++] = 0.0;\n    vertices[vertexIndex++] = 0.0;\n\n    for (let i = 0; i < (HEART_SEGMENTS - 1) / 2; i++) {\n      const vertexX = -2.0 + i * (4.0 / ((HEART_SEGMENTS - 1) / 2 - 1));\n\n      vertices[vertexIndex++] = vertexX * HEART_RADIUS;\n      vertices[vertexIndex++] = -Math.sqrt(1.0 - (Math.abs(vertexX) - 1.0) *\n        (Math.abs(vertexX) - 1.0)) * HEART_RADIUS;\n    }\n\n    for (let i = 0; i < (HEART_SEGMENTS - 1) / 2; i++) {\n      const vertexX = -2.0 + i * (4.0 / ((HEART_SEGMENTS - 1) / 2 - 1));\n\n      vertices[vertexIndex++] = -vertexX * HEART_RADIUS;\n      vertices[vertexIndex++] = 3.0 * Math.sqrt(1.0 -\n        (Math.sqrt(Math.abs(vertexX))) / Math.SQRT2) * HEART_RADIUS;\n    }\n\n    this.vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n    this.view = new Float32Array([\n      1.0, 0.0, 0.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      0.0, 0.0, 0.0, 1.0\n    ]);\n\n    this.hearts = [];\n\n    this.heartX = x;\n    this.heartY = y;\n    this.scale = scale;\n\n    for (let i = 0; i < count; i++) {\n      this.hearts.push(new Heart(this, this.heartX, this.heartY, scale));\n      this.heartX += 50.0 * this.scale;\n    }\n  }\n\n  update(player) {\n    if (player.lives > this.hearts.length) {\n      this.hearts.push(new Heart(this, this.heartX, this.heartY, 1.0));\n      this.heartX += 50.0 * this.scale;\n    }\n  }\n\n  draw(gl, shader, player) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\n    shader.use(gl);\n\n    gl.uniformMatrix4fv(shader.view, false, this.view);\n    gl.uniform4f(shader.color, 1.0, 0.0, 0.0, 1.0);\n\n    if (player) {\n      const lastFlashing = player.invincibilityTimer > 0 && player.visible;\n      const newFlashing = player.newHeartTimer <= 0 || player.newHeartVisible;\n\n      for (let i = 0; i < this.hearts.length; i++) {\n        this.hearts[i].draw(gl, shader, player.lives > i + 1 ||\n          (newFlashing && i === player.lives - 1) ||\n          (lastFlashing && i === player.lives));\n      }\n    } else {\n      for (const heart of this.hearts) {\n        heart.draw(gl, shader, false);\n      }\n    }\n  }\n}\n","import HeartCollection from '../entities/HeartCollection';\n\nexport default class GameOverScreen {\n  constructor(gl, shader) {\n    this.heartCollection = new HeartCollection(gl, shader, 300.0, 330.0,\n      3, 7.0);\n\n    this.textTimer = 1800;\n    this.showText = false;\n\n    this.actionTimer = 2000;\n  }\n\n  update(deltaTime, game) {\n    this.actionTimer -= deltaTime;\n\n    if (game.input.wasJustReleased(game.input.ACTION) && this.actionTimer < 0) {\n      game.reset();\n      game.activeScreen = null;\n\n      return;\n    }\n\n    this.textTimer -= deltaTime;\n\n    if (this.textTimer <= 0) {\n      this.textTimer = 800;\n      this.showText = !this.showText;\n    }\n  }\n\n  draw(gl, textContext, shader, projection, view) {\n    shader.use(gl);\n\n    gl.uniformMatrix4fv(shader.projection, false, projection);\n\n    this.heartCollection.draw(gl, shader, null);\n\n    textContext.fillText('GAME', 640, 50);\n    textContext.fillText('OVER', 640, 100);\n\n    if (this.showText) {\n      textContext.fillText('PRESS SPACE TO TRY AGAIN', 640, 700);\n    }\n  }\n}\n","import Sword from './weapons/Sword';\nimport VictoryScreen from '../screens/VictoryScreen';\nimport GameOverScreen from '../screens/GameOverScreen';\n\nconst PLAYER_RADIUS = 5;\nconst PLAYER_SEGMENTS = 11;\nconst PLAYER_SPEED = 0.2;\nconst PLAYER_LIVES = 3;\n\nexport default class Player {\n  constructor(gl, shader, x, y) {\n    const vertices = new Float32Array(PLAYER_SEGMENTS * shader.vertexSize);\n\n    let vertexIndex = 0;\n\n    vertices[vertexIndex++] = 0.0;\n    vertices[vertexIndex++] = 0.0;\n\n    for (let i = 0; i < PLAYER_SEGMENTS - 2; i++) {\n      const angle = ((Math.PI * 2.0) / (PLAYER_SEGMENTS - 2)) * i;\n\n      vertices[vertexIndex++] = Math.cos(angle) * PLAYER_RADIUS;\n      vertices[vertexIndex++] = Math.sin(angle) * PLAYER_RADIUS;\n    }\n\n    vertices[vertexIndex++] = vertices[2];\n    vertices[vertexIndex++] = vertices[3];\n\n    this.vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n    this.x = x;\n    this.y = y;\n    this.angle = 0.0;\n\n    this.model = new Float32Array([\n      1.0, 0.0, 0.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      x, y, 0.0, 1.0\n    ]);\n\n    this.lives = PLAYER_LIVES;\n\n    this.invincibilityTimer = 0;\n    this.flashTimer = 0;\n    this.visible = true;\n\n    this.slidingTimer = 0;\n    this.slidingX = 0;\n    this.slidingY = 0;\n\n    this.sword = new Sword(gl, shader, this);\n\n    this.gems = 0;\n    this.gemTimer = 0;\n    this.gemFlashTimer = 0;\n    this.gemVisible = true;\n\n    this.newHeartTimer = 0;\n    this.newHeartFlashTimer = 0;\n    this.newHeartVisible = true;\n\n    this.exitTextVisible = false;\n  }\n\n  validPosition(map, x, y) {\n    return map.tileAt(x - PLAYER_RADIUS, y) === 0xFF &&\n      map.tileAt(x + PLAYER_RADIUS, y) === 0xFF &&\n      map.tileAt(x, y - PLAYER_RADIUS) === 0xFF &&\n      map.tileAt(x, y + PLAYER_RADIUS) === 0xFF;\n  }\n\n  update(deltaTime, game) {\n    const distance = deltaTime * PLAYER_SPEED;\n\n    let dirX = (game.input.isPressed(game.input.LEFT) ? -1 : 0) +\n      (game.input.isPressed(game.input.RIGHT) ? 1 : 0);\n    let dirY = (game.input.isPressed(game.input.UP) ? -1 : 0) +\n      (game.input.isPressed(game.input.DOWN) ? 1 : 0);\n\n    if (this.sword.swingTimer > 0) {\n      dirX = dirY = 0;\n    }\n\n    if (dirX !== 0 && dirY !== 0) {\n      dirX *= Math.SQRT2 / 2.0;\n      dirY *= Math.SQRT2 / 2.0;\n    }\n\n    if (game.input.isPressed(game.input.LEFT) ||\n      game.input.isPressed(game.input.RIGHT) ||\n      game.input.isPressed(game.input.UP) ||\n      game.input.isPressed(game.input.DOWN)) {\n      this.angle = Math.atan2(dirY, dirX);\n    }\n\n    if (this.slidingTimer > 0) {\n      this.slidingTimer -= deltaTime;\n\n      dirX = this.slidingX;\n      dirY = this.slidingY;\n    }\n\n    const newX = this.x + dirX * distance;\n    const newY = this.y + dirY * distance;\n\n    if (newX !== this.x && this.validPosition(game.map, newX, this.y)) {\n      this.x = newX;\n      this.model[12] = this.x;\n    }\n\n    if (newY !== this.y && this.validPosition(game.map, this.x, newY)) {\n      this.y = newY;\n      this.model[13] = this.y;\n    }\n\n    if (this.invincibilityTimer > 0) {\n      this.invincibilityTimer -= deltaTime;\n\n      if (this.flashTimer > 0) {\n        this.flashTimer -= deltaTime;\n      } else {\n        this.flashTimer = 85;\n\n        this.visible = !this.visible;\n      }\n    } else {\n      this.visible = true;\n    }\n\n    if (this.gemTimer > 0) {\n      this.gemTimer -= deltaTime;\n\n      if (this.gemFlashTimer > 0) {\n        this.gemFlashTimer -= deltaTime;\n      } else {\n        this.gemFlashTimer = 80;\n\n        this.gemVisible = !this.gemVisible;\n      }\n    }\n\n    if (this.newHeartTimer > 0) {\n      this.newHeartTimer -= deltaTime;\n\n      if (this.newHeartFlashTimer > 0) {\n        this.newHeartFlashTimer -= deltaTime;\n      } else {\n        this.newHeartFlashTimer = 80;\n\n        this.newHeartVisible = !this.newHeartVisible;\n      }\n    }\n\n    this.exitTextVisible = false;\n\n    if (game.input.wasJustPressed(game.input.ACTION)) {\n      this.sword.swing();\n    }\n\n    this.sword.update(deltaTime, game);\n  }\n\n  damage(game, slidingX, slidingY) {\n    if (this.invincibilityTimer > 0) {\n      return;\n    }\n\n    this.lives--;\n    this.invincibilityTimer = 1000;\n\n    this.slidingTimer = 500;\n    this.slidingX = slidingX;\n    this.slidingY = slidingY;\n\n    game.shake(500);\n\n    game.particleSystem.emitRandom(game.gl, this.x, this.y, 0.01, 0.2,\n      1.0, 0.0, 0.0, 50);\n\n    if (this.lives === 0) {\n      game.activeScreen = new GameOverScreen(game.gl, game.basicShader);\n    }\n  }\n\n  collectGem(game, gem) {\n    this.gems++;\n    this.gemTimer = 800;\n    this.gemFlashTimer = 80;\n\n    game.particleSystem.emitRandom(game.gl, gem.x, gem.y, 0.07, 0.1,\n      1.0, 0.0, 1.0, 50);\n  }\n\n  collectHeart(game, heart) {\n    this.lives++;\n    this.newHeartTimer = 800;\n    this.newHeartFlashTimer = 80;\n\n    game.particleSystem.emitRandom(game.gl, heart.x, heart.y, 0.07, 0.1,\n      1.0, 0.0, 0.0, 50);\n  }\n\n  touchExit(game) {\n    if (this.gems < 5) {\n      this.exitTextVisible = true;\n    } else {\n      game.activeScreen = new VictoryScreen(game.gl, game.basicShader);\n    }\n  }\n\n  draw(gl, textContext, shader) {\n    if (this.exitTextVisible) {\n      textContext.fillText('COLLECT THE GEMS FIRST', 640, 360);\n    }\n\n    if (!this.visible) {\n      return;\n    }\n\n    this.sword.draw(gl, shader);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\n    shader.use(gl);\n\n    gl.uniformMatrix4fv(shader.model, false, this.model);\n    gl.uniform4f(shader.color, 1.0, 0.0, 0.0, 1.0);\n\n    gl.drawArrays(gl.TRIANGLE_FAN, 0, PLAYER_SEGMENTS);\n  }\n}\n","import vertexShaderSource from '../../shaders/alpha.vert';\nimport fragmentShaderSource from '../../shaders/alpha.frag';\nimport Shader from '../Shader';\n\nconst LIGHT_CONE_SEGMENTS = 256;\nconst LIGHT_CONE_RADIUS = 196;\n\nexport default class LightCone {\n  constructor(gl) {\n    this.shader = new Shader(gl, vertexShaderSource, fragmentShaderSource);\n\n    this.baseVertices = new Float32Array(LIGHT_CONE_SEGMENTS *\n      this.shader.vertexSize);\n\n    this.baseVertexBuffer = gl.createBuffer();\n\n    this.magnifiedVertices = new Float32Array(LIGHT_CONE_SEGMENTS *\n      this.shader.vertexSize);\n\n    this.magnifiedVertexBuffer = gl.createBuffer();\n\n    this.x = 0;\n    this.y = 0;\n\n    this.model = new Float32Array([\n      1.0, 0.0, 0.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      this.x, this.y, 0.0, 1.0\n    ]);\n  }\n\n  update(deltaTime, game) {\n    if (game.player.x === this.x && game.player.y === this.y) {\n      return;\n    }\n\n    this.x = game.player.x;\n    this.y = game.player.y;\n\n    this.model[12] = this.x;\n    this.model[13] = this.y;\n\n    let vertexIndex = 2;\n\n    this.baseVertices[vertexIndex] = this.magnifiedVertices[vertexIndex] = 1.0;\n    vertexIndex++;\n\n    for (let i = 0; i < LIGHT_CONE_SEGMENTS - 1; i++) {\n      const angle = ((Math.PI * 2.0) / (LIGHT_CONE_SEGMENTS - 2)) * i;\n\n      const dirX = Math.cos(angle);\n      const dirY = Math.sin(angle);\n\n      const distance = Math.min(\n        game.map.getWallDistance(this.x, this.y, dirX, dirY),\n        LIGHT_CONE_RADIUS);\n\n      this.baseVertices[vertexIndex] = dirX * distance;\n      this.magnifiedVertices[vertexIndex] = dirX * (distance + 5.0);\n      vertexIndex++;\n\n      this.baseVertices[vertexIndex] = dirY * distance;\n      this.magnifiedVertices[vertexIndex] = dirY * (distance + 5.0);\n      vertexIndex++;\n\n      this.baseVertices[vertexIndex] = this.magnifiedVertices[vertexIndex] =\n        (LIGHT_CONE_RADIUS - distance) / LIGHT_CONE_RADIUS;\n      vertexIndex++;\n    }\n\n    const gl = game.gl;\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.baseVertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.baseVertices, gl.STATIC_DRAW);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.magnifiedVertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.magnifiedVertices, gl.STATIC_DRAW);\n  }\n\n  draw(gl, projection, view, magnified) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, (magnified ? this.magnifiedVertexBuffer\n      : this.baseVertexBuffer));\n\n    this.shader.use(gl);\n\n    gl.uniformMatrix4fv(this.shader.projection, false, projection);\n    gl.uniformMatrix4fv(this.shader.view, false, view);\n    gl.uniformMatrix4fv(this.shader.model, false, this.model);\n    gl.uniform3f(this.shader.color, 0.7, 0.7, 0.7);\n\n    gl.drawArrays(gl.TRIANGLE_FAN, 0, LIGHT_CONE_SEGMENTS);\n  }\n}\n","uniform mediump mat4 projection;\nuniform mediump mat4 view;\nuniform mediump mat4 model;\nuniform mediump vec3 color;\n\nattribute vec2 vertexPosition;\nattribute float vertexAlpha;\n\nvarying mediump vec4 vertexColor;\n\nvoid main() {\n  gl_Position = projection * view * model * vec4(vertexPosition, 0.0, 1.0);\n  vertexColor = vec4(color, vertexAlpha);\n}\n","varying mediump vec4 vertexColor;\n\nvoid main() {\n  gl_FragColor = vertexColor;\n}\n","const SNAKE_SPEED = 0.02;\n\nexport default class Snake {\n  constructor(snakeCollection, x, y) {\n    this.snakeCollection = snakeCollection;\n    this.x = x;\n    this.y = y;\n\n    this.angle = Math.random() * 2.0 * Math.PI;\n    this.angleChange = -0.0005 + Math.random() * 0.001;\n\n    this.model = new Float32Array([\n      Math.cos(this.angle), Math.sin(this.angle), 0.0, 0.0,\n      -Math.sin(this.angle), Math.cos(this.angle), 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      x, y, 0.0, 1.0\n    ]);\n\n    this.alive = true;\n    this.charging = false;\n    this.chargingTimer = 500;\n  }\n\n  update(deltaTime, game) {\n    if (!this.alive) {\n      return;\n    }\n\n    let speed = SNAKE_SPEED;\n\n    const distX = game.player.x - this.x;\n    const distY = game.player.y - this.y;\n\n    const dist = Math.sqrt(distX * distX + distY * distY);\n\n    const dirX = distX / dist;\n    const dirY = distY / dist;\n\n    if (dist < 7.0) {\n      game.player.damage(game, dirX, dirY);\n    }\n\n    if (dist > 10.0 && dist < 150.0 &&\n      game.map.getWallDistance(this.x, this.y, dirX, dirY) >= dist) {\n      this.chargingTimer -= deltaTime;\n    } else {\n      this.chargingTimer = 500;\n    }\n\n    this.charging = this.chargingTimer <= 0;\n\n    if (this.charging) {\n      this.angle = Math.atan2(distY, distX);\n      speed *= 6.0;\n    } else {\n      this.angle += deltaTime * 0.0001;\n    }\n\n    const newX = this.x + Math.cos(this.angle) * deltaTime * speed;\n    const newY = this.y + Math.sin(this.angle) * deltaTime * speed;\n\n    if (game.map.tileAt(newX, newY) === 0xFF) {\n      this.x = newX;\n      this.y = newY;\n    } else {\n      this.angle = this.angle - Math.PI;\n      this.angleChange = -0.0005 + Math.random() * 0.001;\n\n      this.x += Math.cos(this.angle) * this.snakeCollection.SNAKE_WIDTH;\n      this.y += Math.sin(this.angle) * this.snakeCollection.SNAKE_WIDTH;\n    }\n\n    this.model[0] = Math.cos(this.angle);\n    this.model[1] = Math.sin(this.angle);\n    this.model[4] = -Math.sin(this.angle);\n    this.model[5] = Math.cos(this.angle);\n\n    this.model[12] = this.x;\n    this.model[13] = this.y;\n  }\n\n  draw(gl, shader) {\n    if (!this.alive) {\n      return;\n    }\n\n    gl.uniformMatrix4fv(shader.model, false, this.model);\n\n    if (this.charging) {\n      gl.uniform4f(shader.color, 1.0, 0.0, 1.0, 1.0);\n      gl.drawArrays(gl.LINE_STRIP, this.snakeCollection.SNAKE_SEGMENTS,\n        this.snakeCollection.SNAKE_SEGMENTS);\n    } else {\n      gl.uniform4f(shader.color, 0.0, 1.0, 0.0, 1.0);\n      gl.drawArrays(gl.LINE_STRIP, 0, this.snakeCollection.SNAKE_SEGMENTS);\n    }\n  }\n}\n","import Snake from './Snake';\n\nconst SNAKE_SEGMENTS = 24;\nconst SNAKE_WIDTH = 30;\nconst SNAKE_HEIGHT = 10;\n\nexport default class SnakeCollection {\n  constructor(game, count) {\n    this.SNAKE_SEGMENTS = SNAKE_SEGMENTS;\n    this.SNAKE_WIDTH = SNAKE_WIDTH;\n    this.SNAKE_HEIGHT = SNAKE_HEIGHT;\n\n    this.vertices = new Float32Array(this.SNAKE_SEGMENTS * 2 *\n      game.basicShader.vertexSize);\n\n    this.vertexBuffer = game.gl.createBuffer();\n\n    this.snakes = [];\n\n    for (let i = 0; i < count; i++) {\n      let room = null;\n\n      do {\n        room = game.map.root.getRandomLeaf();\n      } while (room === game.startingRoom || room.snakes > 6);\n\n      this.snakes.push(new Snake(this,\n        (room.roomX + 1 + Math.random() * (room.roomW - 2)) * 10,\n        (room.roomY + 1 + Math.random() * (room.roomH - 2)) * 10));\n\n      room.snakes++;\n    }\n\n    this.phase = 0;\n    this.chargingPhase = 0;\n  }\n\n  update(deltaTime, game) {\n    const gl = game.gl;\n\n    this.phase += deltaTime * 0.01;\n    this.chargingPhase += deltaTime * 0.06;\n\n    if (this.phase > Math.PI * 2.0) {\n      this.phase -= Math.PI * 2.0;\n    }\n\n    if (this.chargingPhase > Math.PI * 2.0) {\n      this.chargingPhase -= Math.PI * 2.0;\n    }\n\n    this.vertexIndex = 0;\n\n    this.generateVertices(this.phase);\n    this.generateVertices(this.chargingPhase);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.STATIC_DRAW);\n\n    for (const snake of this.snakes) {\n      snake.update(deltaTime, game);\n    }\n  }\n\n  generateVertices(phase) {\n    for (let i = 0; i < SNAKE_SEGMENTS - 4; i++) {\n      const snakeX = ((SNAKE_WIDTH - 10.0) / (SNAKE_SEGMENTS - 4.0)) * i -\n        SNAKE_WIDTH;\n      this.vertices[this.vertexIndex++] = snakeX;\n      this.vertices[this.vertexIndex++] = Math.sin(i + phase) *\n        (SNAKE_HEIGHT / 2.0);\n    }\n\n    this.vertices[this.vertexIndex++] = -5.0;\n    this.vertices[this.vertexIndex++] = SNAKE_HEIGHT / 2.0;\n    this.vertices[this.vertexIndex++] = 0.0;\n    this.vertices[this.vertexIndex++] = 0.0;\n    this.vertices[this.vertexIndex++] = -5.0;\n    this.vertices[this.vertexIndex++] = -SNAKE_HEIGHT / 2.0;\n    this.vertices[this.vertexIndex++] = this.vertices[this.vertexIndex - 9];\n    this.vertices[this.vertexIndex++] = this.vertices[this.vertexIndex - 9];\n  }\n\n  draw(game) {\n    game.gl.bindBuffer(game.gl.ARRAY_BUFFER, this.vertexBuffer);\n\n    game.basicShader.use(game.gl);\n\n    for (const snake of this.snakes) {\n      if (snake.x >= game.cameraX - 30 &&\n        snake.x <= game.cameraX + game.canvas.width + 30 &&\n        snake.y >= game.cameraY - 30 &&\n        snake.y <= game.cameraY + game.canvas.height + 30) {\n        snake.draw(game.gl, game.basicShader);\n      }\n    }\n  }\n}\n","import Gem from '../Gem';\n\nexport default class CollectibleGemCollection {\n  constructor(game, count) {\n    this.vertexBuffer = game.gemCollection.vertexBuffer;\n    this.indexBuffer = game.gemCollection.indexBuffer;\n\n    this.gems = [];\n\n    for (let i = 0; i < count; i++) {\n      let room = null;\n\n      do {\n        room = game.map.root.getRandomLeaf();\n      } while (room === game.startingRoom || room.containsGem);\n\n      this.gems.push(new Gem(\n        (room.roomX + 2 + Math.random() * (room.roomW - 4)) * 10,\n        (room.roomY + 2 + Math.random() * (room.roomH - 4)) * 10,\n        0.7));\n\n      room.containsGem = true;\n    }\n  }\n\n  update(game) {\n    for (const gem of this.gems) {\n      gem.update(game);\n    }\n  }\n\n  draw(game) {\n    game.gl.bindBuffer(game.gl.ARRAY_BUFFER, this.vertexBuffer);\n    game.gl.bindBuffer(game.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n\n    game.basicShader.use(game.gl);\n\n    game.gl.uniform4f(game.basicShader.color, 1.0, 0.0, 1.0, 1.0);\n\n    for (const gem of this.gems) {\n      if (gem.x >= game.cameraX - 30 &&\n        gem.x <= game.cameraX + game.canvas.width + 30 &&\n        gem.y >= game.cameraY - 30 &&\n        gem.y <= game.cameraY + game.canvas.height + 30) {\n        gem.draw(game.gl, game.basicShader, false);\n      }\n    }\n  }\n}\n","import Heart from '../Heart';\n\nexport default class CollectibleHeartCollection {\n  constructor(game, count) {\n    this.vertexBuffer = game.heartCollection.vertexBuffer;\n    this.indexBuffer = game.heartCollection.indexBuffer;\n\n    this.hearts = [];\n\n    for (let i = 0; i < count; i++) {\n      let room = null;\n\n      do {\n        room = game.map.root.getRandomLeaf();\n      } while (room === game.startingRoom || room.containsHeart);\n\n      this.hearts.push(new Heart(game.heartCollection,\n        (room.roomX + 2 + Math.random() * (room.roomW - 4)) * 10,\n        (room.roomY + 2 + Math.random() * (room.roomH - 4)) * 10,\n        0.7));\n\n      room.containsHeart = true;\n    }\n  }\n\n  update(game) {\n    for (const gem of this.hearts) {\n      gem.update(game);\n    }\n  }\n\n  draw(game) {\n    game.gl.bindBuffer(game.gl.ARRAY_BUFFER, this.vertexBuffer);\n    game.gl.bindBuffer(game.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n\n    game.basicShader.use(game.gl);\n\n    game.gl.uniform4f(game.basicShader.color, 1.0, 0.0, 0.0, 1.0);\n\n    for (const gem of this.hearts) {\n      if (gem.x >= game.cameraX - 30 &&\n        gem.x <= game.cameraX + game.canvas.width + 30 &&\n        gem.y >= game.cameraY - 30 &&\n        gem.y <= game.cameraY + game.canvas.height + 30) {\n        gem.draw(game.gl, game.basicShader, true);\n      }\n    }\n  }\n}\n","export default class Exit {\n  constructor(game) {\n    const vertices = new Float32Array([\n      -15.0, -5.0,\n      -15.0, -15.0,\n      15.0, -15.0,\n      15.0, 15.0,\n      -15.0, 15.0,\n      -15.0, 5.0,\n\n      -20.0, 0.0,\n      0.0, 0.0,\n      -5.0, -5.0,\n      -5.0, 5.0\n    ]);\n\n    const indices = new Uint16Array([\n      0, 1,\n      1, 2,\n      2, 3,\n      3, 4,\n      4, 5,\n\n      6, 7,\n      7, 8,\n      7, 9\n    ]);\n\n    this.vertexBuffer = game.gl.createBuffer();\n    game.gl.bindBuffer(game.gl.ARRAY_BUFFER, this.vertexBuffer);\n    game.gl.bufferData(game.gl.ARRAY_BUFFER, vertices, game.gl.STATIC_DRAW);\n\n    this.indexBuffer = game.gl.createBuffer();\n    game.gl.bindBuffer(game.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n    game.gl.bufferData(game.gl.ELEMENT_ARRAY_BUFFER, indices,\n      game.gl.STATIC_DRAW);\n\n    let room = null;\n\n    do {\n      room = game.map.root.getRandomLeaf();\n    } while (room === game.startingRoom || room.containsExit);\n\n    this.x = (room.roomX + 2 + Math.random() * (room.roomW - 4)) * 10;\n    this.y = (room.roomY + 2 + Math.random() * (room.roomH - 4)) * 10;\n\n    room.containsExit = true;\n\n    this.model = new Float32Array([\n      1.0, 0.0, 0.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      this.x, this.y, 0.0, 1.0\n    ]);\n  }\n\n  update(game) {\n    const distX = game.player.x - this.x;\n    const distY = game.player.y - this.y;\n\n    const dist = Math.sqrt(distX * distX + distY * distY);\n\n    if (dist <= 20.0) {\n      game.player.touchExit(game);\n    }\n  }\n\n  draw(gl, shader) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n\n    shader.use(gl);\n\n    gl.uniformMatrix4fv(shader.model, false, this.model);\n    gl.uniform4f(shader.color, 1.0, 1.0, 0.0, 1.0);\n\n    gl.drawElements(gl.LINES, 16, gl.UNSIGNED_SHORT, 0);\n  }\n}\n","import vertexShaderSource from '../shaders/texture.vert';\nimport fragmentShaderSource from '../shaders/texture.frag';\nimport Shader from './Shader';\n\nexport default class FogOfWar {\n  constructor(gl, width, height) {\n    this.width = width;\n    this.height = height;\n\n    const vertices = new Float32Array([\n      0.0, 0.0, 0.0, 0.0,\n      this.width - 1.0, 0.0, 1.0, 0.0,\n      0.0, this.height - 1.0, 0.0, 1.0,\n      this.width - 1.0, this.height - 1.0, 1.0, 1.0\n    ]);\n\n    const indices = new Uint16Array([\n      0, 2, 1,\n      1, 2, 3\n    ]);\n\n    this.vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n    this.indexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);\n\n    this.texture = gl.createTexture();\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.width, this.height, 0,\n      gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    this.framebuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D, this.texture, 0);\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    this.projection = new Float32Array([\n      2.0 / (this.width - 1.0), 0.0, 0.0, 0.0,\n      0.0, 2.0 / (this.height - 1.0), 0.0, 0.0,\n      0.0, 0.0, -1.0, 0.0,\n      -1.0, -1.0, 0.0, 1.0\n    ]);\n\n    this.view = new Float32Array([\n      1.0, 0.0, 0.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      0.0, 0.0, 0.0, 1.0\n    ]);\n\n    this.shader = new Shader(gl, vertexShaderSource, fragmentShaderSource);\n  }\n\n  draw(gl, projection, view) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n\n    this.shader.use(gl);\n\n    gl.uniformMatrix4fv(this.shader.projection, false, projection);\n    gl.uniformMatrix4fv(this.shader.view, false, view);\n\n    gl.uniform1i(this.shader.sampler, 0);\n\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n\n    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n  }\n}\n","uniform mediump mat4 projection;\nuniform mediump mat4 view;\n\nattribute vec2 vertexPosition;\nattribute vec2 vertexTexCoord;\n\nvarying highp vec2 texCoord;\n\nvoid main() {\n  gl_Position = projection * view * vec4(vertexPosition, 0.0, 1.0);\n  texCoord = vertexTexCoord;\n}\n","uniform sampler2D sampler;\n\nvarying highp vec2 texCoord;\n\nvoid main() {\n  gl_FragColor = texture2D(sampler, texCoord);\n}\n","import vertexShaderSource from '../shaders/widen.vert';\nimport fragmentShaderSource from '../shaders/widen.frag';\nimport Shader from './Shader';\n\nexport default class PostProcessor {\n  constructor(gl, width, height) {\n    this.width = width;\n    this.height = height;\n\n    const vertices = new Float32Array([\n      -1.0, 1.0, 0.0, 1.0,\n      1.0, 1.0, 1.0, 1.0,\n      -1.0, -1.0, 0.0, 0.0,\n      1.0, -1.0, 1.0, 0.0\n    ]);\n\n    const indices = new Uint16Array([\n      0, 2, 1,\n      1, 2, 3\n    ]);\n\n    this.vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n    this.indexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);\n\n    this.texture = gl.createTexture();\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.width, this.height, 0,\n      gl.RGBA, gl.UNSIGNED_BYTE, null);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    this.framebuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D, this.texture, 0);\n\n    this.shader = new Shader(gl, vertexShaderSource, fragmentShaderSource);\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n  }\n\n  draw(gl) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n\n    this.shader.use(gl);\n\n    gl.uniform1i(this.shader.sampler, 0);\n    gl.uniform2f(this.shader.texSize, this.width, this.height);\n\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n\n    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n  }\n}\n","attribute vec2 vertexPosition;\nattribute vec2 vertexTexCoord;\n\nvarying highp vec2 texCoord;\n\nvoid main() {\n  gl_Position = vec4(vertexPosition, 0.0, 1.0);\n  texCoord = vertexTexCoord;\n}\n","precision highp float;\n\nuniform sampler2D sampler;\nuniform vec2 texSize;\n\nvarying highp vec2 texCoord;\n\nvoid main() {\n  vec2 texStep = 1.0 / texSize;\n\n  vec4 color = vec4(0.0);\n  color += texture2D(sampler, vec2(texCoord.x, texCoord.y));\n  color += texture2D(sampler, vec2(texCoord.x - texStep.x, texCoord.y));\n  color += texture2D(sampler, vec2(texCoord.x + texStep.x, texCoord.y));\n  color += texture2D(sampler, vec2(texCoord.x, texCoord.y - texStep.y));\n  color += texture2D(sampler, vec2(texCoord.x, texCoord.y + texStep.y));\n\n  gl_FragColor = color;\n}\n","import vertexShaderSource from '../shaders/particle.vert';\nimport fragmentShaderSource from '../shaders/particle.frag';\nimport Shader from './Shader';\n\nconst MAX_PARTICLES = 512;\n\nexport default class ParticleSystem {\n  constructor(gl) {\n    this.shader = new Shader(gl, vertexShaderSource, fragmentShaderSource);\n\n    this.particles = new Float32Array(MAX_PARTICLES * this.shader.vertexSize);\n\n    this.vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.particles, gl.STATIC_DRAW);\n\n    this.nextParticle = 0;\n    this.particleCount = 0;\n\n    this.elapsedTime = 0;\n  }\n\n  update(deltaTime) {\n    this.elapsedTime += deltaTime;\n  }\n\n  emit(gl, x, y, dx, dy, r, g, b, count) {\n    for (let i = 0; i < count; i++) {\n      this.nextParticle = (this.nextParticle + 1) % MAX_PARTICLES;\n      this.particleCount++;\n\n      if (this.particleCount > MAX_PARTICLES) {\n        this.particleCount = MAX_PARTICLES;\n      }\n\n      let vertexIndex = this.nextParticle * this.shader.vertexSize;\n\n      this.particles[vertexIndex++] = x;\n      this.particles[vertexIndex++] = y;\n      this.particles[vertexIndex++] = dx;\n      this.particles[vertexIndex++] = dy;\n      this.particles[vertexIndex++] = this.elapsedTime;\n      this.particles[vertexIndex++] = r;\n      this.particles[vertexIndex++] = g;\n      this.particles[vertexIndex++] = b;\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.particles, gl.STATIC_DRAW);\n  }\n\n  emitRandom(gl, x, y, minSpeed, maxSpeed, r, g, b, count) {\n    for (let i = 0; i < count; i++) {\n      this.nextParticle = (this.nextParticle + 1) % MAX_PARTICLES;\n      this.particleCount++;\n\n      if (this.particleCount > MAX_PARTICLES) {\n        this.particleCount = MAX_PARTICLES;\n      }\n\n      let vertexIndex = this.nextParticle * this.shader.vertexSize;\n\n      const angle = Math.random() * Math.PI * 2.0;\n      const speed = minSpeed + Math.random() * (maxSpeed - minSpeed);\n\n      this.particles[vertexIndex++] = x;\n      this.particles[vertexIndex++] = y;\n      this.particles[vertexIndex++] = Math.cos(angle) * speed;\n      this.particles[vertexIndex++] = Math.sin(angle) * speed;\n      this.particles[vertexIndex++] = this.elapsedTime;\n      this.particles[vertexIndex++] = r;\n      this.particles[vertexIndex++] = g;\n      this.particles[vertexIndex++] = b;\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.particles, gl.STATIC_DRAW);\n  }\n\n  draw(gl, projection, view) {\n    if (this.particleCount <= 0) {\n      return;\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\n    this.shader.use(gl);\n\n    gl.uniformMatrix4fv(this.shader.projection, false, projection);\n    gl.uniformMatrix4fv(this.shader.view, false, view);\n\n    gl.uniform1f(this.shader.elapsedTime, this.elapsedTime);\n\n    gl.drawArrays(gl.POINTS, 0, this.particleCount);\n  }\n}\n","uniform mediump mat4 projection;\nuniform mediump mat4 view;\nuniform mediump float elapsedTime;\n\nattribute vec2 particlePosition;\nattribute vec2 particleVelocity;\nattribute float particleEmitted;\nattribute vec3 particleColor;\n\nvarying mediump vec4 color;\n\nvoid main() {\n  vec2 position = particlePosition + particleVelocity *\n    (elapsedTime - particleEmitted);\n  gl_Position = projection * view * vec4(position, 0.0, 1.0);\n  color = vec4(particleColor, (1000.0 - (elapsedTime - particleEmitted)) /\n    1000.0);\n  gl_PointSize = 3.0;\n}\n","varying mediump vec4 color;\n\nvoid main() {\n  gl_FragColor = color;\n}\n","import vertexShaderSource from '../../../shaders/title.vert';\nimport fragmentShaderSource from '../../../shaders/title.frag';\nimport Shader from '../../Shader';\n\nexport default class NeonTitle {\n  constructor(gl, x, y) {\n    this.shader = new Shader(gl, vertexShaderSource, fragmentShaderSource);\n\n    this.vertices = new Float32Array([\n      0.0, 300.0, 0.0, 0.0, 1.0, 0.0 / 4.0,\n      0.0, 0.0, 0.0, 0.0, 1.0, 0.33 / 4.0,\n      150.0, 300.0, 0.0, 0.0, 1.0, 0.66 / 4.0,\n      150.0, 0.0, 0.0, 0.0, 1.0, 1.0 / 4.0,\n\n      390.0, 0.0, 1.0, 0.0, 1.0, 0.25 + 0.0 / 4.0,\n      210.0, 0.0, 1.0, 0.0, 1.0, 0.25 + 0.25 / 4.0,\n      210.0, 300.0, 1.0, 0.0, 1.0, 0.25 + 0.5 / 4.0,\n      390.0, 300.0, 1.0, 0.0, 1.0, 0.25 + 0.75 / 4.0,\n      210.0, 150.0, 1.0, 0.0, 1.0, 0.25 + 0.75 / 4.0,\n      390.0, 150.0, 1.0, 0.0, 1.0, 0.25 + 1.0 / 4.0,\n\n      450.0, 0.0, 1.0, 1.0, 0.0, 0.5 + 0.0 / 4.0,\n      450.0, 300.0, 1.0, 1.0, 0.0, 0.5 + 0.25 / 4.0,\n      600.0, 300.0, 1.0, 1.0, 0.0, 0.5 + 0.5 / 4.0,\n      600.0, 0.0, 1.0, 1.0, 0.0, 0.5 + 0.75 / 4.0,\n      450.0, 0.0, 1.0, 1.0, 0.0, 0.5 + 1.0 / 4.0,\n\n      660.0, 300.0, 1.0, 0.0, 0.0, 0.75 + 0.0 / 4.0,\n      660.0, 0.0, 1.0, 0.0, 0.0, 0.75 + 0.33 / 4.0,\n      810.0, 300.0, 1.0, 0.0, 0.0, 0.75 + 0.66 / 4.0,\n      810.0, 0.0, 1.0, 0.0, 0.0, 0.75 + 1.0 / 4.0\n    ]);\n\n    this.indices = new Uint16Array([\n      0, 1,\n      1, 2,\n      2, 3,\n\n      4, 5,\n      5, 6,\n      6, 7,\n      8, 9,\n\n      10, 11,\n      11, 12,\n      12, 13,\n      13, 14,\n\n      15, 16,\n      16, 17,\n      17, 18\n    ]);\n\n    this.vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.STATIC_DRAW);\n\n    this.indexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n\n    this.x = x;\n    this.y = y;\n\n    this.model = new Float32Array([\n      1.0, 0.0, 0.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      this.x, this.y, 0.0, 1.0\n    ]);\n\n    this.view = new Float32Array([\n      1.0, 0.0, 0.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      0.0, 0.0, 0.0, 1.0\n    ]);\n\n    this.elapsedTime = 0;\n    this.maxAlpha = 1.0;\n  }\n\n  update(deltaTime, game) {\n    this.elapsedTime += deltaTime;\n    this.maxAlpha = this.elapsedTime / 4000.0;\n\n    for (let i = 0; i < this.indices.length; i += 2) {\n      const start = this.indices[i];\n      const end = this.indices[i + 1];\n\n      const startAlpha = this.vertices[start * this.shader.vertexSize + 5];\n      const endAlpha = this.vertices[end * this.shader.vertexSize + 5];\n\n      if (endAlpha > this.maxAlpha) {\n        let startVertexIndex = start * this.shader.vertexSize;\n        let endVertexIndex = end * this.shader.vertexSize;\n\n        const startX = this.vertices[startVertexIndex++];\n        const startY = this.vertices[startVertexIndex++];\n\n        const r = this.vertices[startVertexIndex++];\n        const g = this.vertices[startVertexIndex++];\n        const b = this.vertices[startVertexIndex++];\n\n        const endX = this.vertices[endVertexIndex++];\n        const endY = this.vertices[endVertexIndex++];\n\n        const progress = (this.maxAlpha - startAlpha) / (endAlpha - startAlpha);\n\n        const x = startX + (endX - startX) * progress;\n        const y = startY + (endY - startY) * progress;\n\n        game.particleSystem.emitRandom(game.gl, this.x + x, this.y + y,\n          0.1, 0.2, r, g, b, 50);\n\n        break;\n      }\n    }\n  }\n\n  draw(gl, projection, view) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n\n    this.shader.use(gl);\n\n    gl.uniformMatrix4fv(this.shader.projection, false, projection);\n    gl.uniformMatrix4fv(this.shader.view, false, this.view);\n    gl.uniformMatrix4fv(this.shader.model, false, this.model);\n\n    gl.uniform1f(this.shader.maxAlpha, this.maxAlpha);\n\n    gl.drawElements(gl.LINES, this.indices.length, gl.UNSIGNED_SHORT, 0);\n  }\n}\n","uniform mediump mat4 projection;\nuniform mediump mat4 view;\nuniform mediump mat4 model;\n\nattribute vec2 vertexPosition;\nattribute vec4 vertexColor;\n\nvarying mediump vec4 color;\n\nvoid main() {\n  gl_Position = projection * view * model * vec4(vertexPosition, 0.0, 1.0);\n  color = vertexColor;\n}\n","uniform mediump float maxAlpha;\n\nvarying mediump vec4 color;\n\nvoid main() {\n  gl_FragColor = vec4(color.rgb, 1.0) * (1.0 - step(maxAlpha, color.a));\n}\n","export default class DungeonTitle {\n  constructor(gl, x, y) {\n    const vertices = new Float32Array([\n      0.0, 0.0,\n      0.0, 200.0,\n      70.0, 100.0,\n      70.0, 200.0,\n\n      100.0, 0.0,\n      100.0, 200.0,\n      170.0, 200.0,\n      170.0, 0.0,\n\n      200.0, 0.0,\n      200.0, 200.0,\n      270.0, 0.0,\n      270.0, 200.0,\n\n      300.0, 0.0,\n      370.0, 0.0,\n      300.0, 200.0,\n      370.0, 200.0,\n      370.0, 100.0,\n      330.0, 100.0,\n\n      400.0, 0.0,\n      470.0, 0.0,\n      400.0, 200.0,\n      470.0, 200.0,\n      400.0, 100.0,\n      470.0, 100.0,\n\n      500.0, 0.0,\n      570.0, 0.0,\n      500.0, 200.0,\n      570.0, 200.0,\n\n      600.0, 0.0,\n      600.0, 200.0,\n      670.0, 0.0,\n      670.0, 200.0\n    ]);\n\n    this.indices = new Uint16Array([\n      0, 1,\n      0, 2,\n      2, 3,\n      3, 1,\n\n      4, 5,\n      5, 6,\n      6, 7,\n\n      8, 9,\n      8, 11,\n      10, 11,\n\n      12, 13,\n      12, 14,\n      14, 15,\n      15, 16,\n      16, 17,\n\n      18, 19,\n      18, 20,\n      20, 21,\n      22, 23,\n\n      24, 25,\n      24, 26,\n      25, 27,\n      26, 27,\n\n      28, 29,\n      28, 31,\n      30, 31\n    ]);\n\n    this.vertexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n\n    this.indexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n\n    this.x = x;\n    this.y = y;\n\n    this.model = new Float32Array([\n      1.0, 0.0, 0.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      this.x, this.y, 0.0, 1.0\n    ]);\n\n    this.view = new Float32Array([\n      1.0, 0.0, 0.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      0.0, 0.0, 0.0, 1.0\n    ]);\n\n    this.elapsedTime = 0;\n    this.alpha = 0.0;\n  }\n\n  update(deltaTime) {\n    this.elapsedTime += deltaTime;\n    this.alpha = this.elapsedTime / 4000.0;\n  }\n\n  draw(gl, shader, projection, view) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n\n    shader.use(gl);\n\n    gl.uniformMatrix4fv(shader.projection, false, projection);\n    gl.uniformMatrix4fv(shader.view, false, this.view);\n    gl.uniformMatrix4fv(shader.model, false, this.model);\n\n    gl.uniform4f(shader.color, 1.0, 1.0, 1.0, this.alpha);\n\n    gl.drawElements(gl.LINES, this.indices.length, gl.UNSIGNED_SHORT, 0);\n  }\n}\n","import NeonTitle from '../entities/texts/NeonTitle';\nimport DungeonTitle from '../entities/texts/DungeonTitle';\n\nexport default class TitleScreen {\n  constructor(gl) {\n    this.neonTitle = new NeonTitle(gl, 235.0, 20.0);\n    this.dungeonTitle = new DungeonTitle(gl, 305.0, 400.0);\n\n    this.textTimer = 4800;\n    this.showText = false;\n  }\n\n  update(deltaTime, game) {\n    if (game.input.wasJustReleased(game.input.ACTION)) {\n      game.activeScreen = null;\n\n      return;\n    }\n\n    this.neonTitle.update(deltaTime, game);\n    this.dungeonTitle.update(deltaTime);\n\n    this.textTimer -= deltaTime;\n\n    if (this.textTimer <= 0) {\n      this.textTimer = 800;\n      this.showText = !this.showText;\n    }\n  }\n\n  draw(gl, textContext, shader, projection, view) {\n    this.neonTitle.draw(gl, projection, view);\n    this.dungeonTitle.draw(gl, shader, projection, view);\n\n    if (this.showText) {\n      textContext.fillText('PRESS SPACE TO BEGIN', 640, 700);\n    }\n  }\n}\n","import vertexShaderSource from '../shaders/basic.vert';\nimport fragmentShaderSource from '../shaders/basic.frag';\nimport Shader from './Shader';\nimport Input from './Input';\nimport Map from './entities/Map';\nimport Player from './entities/Player';\nimport LightCone from './entities/LightCone';\nimport HeartCollection from './entities/HeartCollection';\nimport GemCollection from './entities/GemCollection';\nimport SnakeCollection from './entities/enemies/SnakeCollection';\nimport CollectibleGemCollection from\n  './entities/collectibles/CollectibleGemCollection';\nimport CollectibleHeartCollection from\n  './entities/collectibles/CollectibleHeartCollection';\nimport Exit from './entities/Exit';\nimport FogOfWar from './FogOfWar';\nimport PostProcessor from './PostProcessor';\nimport ParticleSystem from './ParticleSystem';\nimport TitleScreen from './screens/TitleScreen';\n\nconst SCREEN_WIDTH = 1280;\nconst SCREEN_HEIGHT = 720;\n\nconst NUM_SNAKES = 150;\nconst NUM_GEMS = 5;\nconst NUM_HEARTS = 3;\n\nexport default class Game {\n  constructor() {\n    this.canvasContainer = document.createElement('div');\n    this.canvasContainer.id = 'canvas-container';\n    document.body.appendChild(this.canvasContainer);\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = SCREEN_WIDTH;\n    this.canvas.height = SCREEN_HEIGHT;\n    this.canvasContainer.appendChild(this.canvas);\n    this.gl = this.canvas.getContext('webgl');\n\n    this.textCanvas = document.createElement('canvas');\n    this.textCanvas.width = SCREEN_WIDTH;\n    this.textCanvas.height = SCREEN_HEIGHT;\n    this.textCanvas.id = 'textCanvas';\n    this.canvasContainer.appendChild(this.textCanvas);\n    this.textContext = this.textCanvas.getContext('2d');\n    this.textContext.font = '48px Verdana, Arial, Helvetica, sans-serif';\n    this.textContext.textAlign = 'center';\n    this.textContext.fillStyle = 'white';\n\n    this.gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    this.gl.enable(this.gl.BLEND);\n\n    this.projection = new Float32Array([\n      2.0 / (this.canvas.width - 1.0), 0.0, 0.0, 0.0,\n      0.0, -2.0 / (this.canvas.height - 1.0), 0.0, 0.0,\n      0.0, 0.0, -1.0, 0.0,\n      -1.0, 1.0, 0.0, 1.0\n    ]);\n\n    this.cameraX = 0.0;\n    this.cameraY = 0.0;\n\n    this.view = new Float32Array([\n      1.0, 0.0, 0.0, 0.0,\n      0.0, 1.0, 0.0, 0.0,\n      0.0, 0.0, 1.0, 0.0,\n      -this.cameraX, -this.cameraY, 0.0, 1.0\n    ]);\n\n    this.input = new Input();\n\n    this.basicShader = new Shader(this.gl, vertexShaderSource,\n      fragmentShaderSource);\n\n    this.reset();\n\n    this.postProcessor = new PostProcessor(this.gl, this.canvas.width,\n      this.canvas.height);\n    this.guiPostProcessor = new PostProcessor(this.gl, this.canvas.width,\n      this.canvas.height);\n\n    this.particleSystem = new ParticleSystem(this.gl);\n\n    this.activeScreen = new TitleScreen(this.gl, this.basicShader);\n\n    this.lastTimestamp = performance.now();\n\n    this.frames = 0;\n    this.frameTimer = 0;\n  }\n\n  reset() {\n    this.map = new Map(this.gl, this.canvas.width * 3, this.canvas.height * 3);\n\n    this.startingRoom = this.map.root.getRandomLeaf();\n\n    this.player = new Player(this.gl, this.basicShader,\n      (this.startingRoom.roomX + this.startingRoom.roomW / 2) * 10,\n      (this.startingRoom.roomY + this.startingRoom.roomH / 2) * 10);\n\n    this.heartCollection = new HeartCollection(this.gl, this.basicShader,\n      30.0, 20.0, this.player.lives, 1.0);\n\n    this.gemCollection = new GemCollection(this.gl, this.basicShader,\n      30.0, 80.0, NUM_GEMS, 1.0);\n\n    this.snakeCollection = new SnakeCollection(this, NUM_SNAKES);\n\n    this.collectibleGemCollection = new CollectibleGemCollection(this,\n      NUM_GEMS);\n    this.collectibleHeartCollection = new CollectibleHeartCollection(this,\n      NUM_HEARTS);\n\n    this.exit = new Exit(this);\n\n    this.lightCone = new LightCone(this.gl);\n\n    this.fogOfWar = new FogOfWar(this.gl, this.map.width, this.map.height);\n\n    this.shakeTimer = 0;\n\n    this.explanationTimer = 2000;\n  }\n\n  update(timestamp) {\n    let deltaTime = timestamp - this.lastTimestamp;\n\n    if (deltaTime < 0) {\n      deltaTime = 0;\n    }\n\n    this.input.update();\n\n    if (this.activeScreen) {\n      this.activeScreen.update(deltaTime, this);\n    }\n\n    if (!this.activeScreen) {\n      this.player.update(deltaTime, this);\n      this.lightCone.update(deltaTime, this);\n\n      this.snakeCollection.update(deltaTime, this);\n      this.collectibleGemCollection.update(this);\n      this.collectibleHeartCollection.update(this);\n\n      this.heartCollection.update(this.player);\n\n      this.exit.update(this);\n\n      this.particleSystem.update(deltaTime);\n\n      this.cameraX = this.player.x - this.canvas.width / 2.0;\n      this.cameraY = this.player.y - this.canvas.height / 2.0;\n\n      if (this.explanationTimer > 0) {\n        this.explanationTimer -= deltaTime;\n      }\n    } else {\n      this.cameraX = 0.0;\n      this.cameraY = 0.0;\n\n      this.particleSystem.update(deltaTime);\n    }\n\n    if (this.shakeTimer > 0) {\n      this.shakeTimer -= deltaTime;\n\n      this.cameraX += -4.0 + Math.random() * 8.0;\n      this.cameraY += -4.0 + Math.random() * 8.0;\n    }\n\n    this.view[12] = -this.cameraX;\n    this.view[13] = -this.cameraY;\n\n    this.lastTimestamp = timestamp;\n\n    this.frames++;\n    this.frameTimer += deltaTime;\n\n    if (this.frameTimer > 1000) {\n      console.log(`FPS: ${this.frames}`);\n      this.frames = 0;\n      this.frameTimer -= 1000;\n    }\n  }\n\n  shake(duration) {\n    this.shakeTimer = duration;\n  }\n\n  draw() {\n    this.textContext.clearRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\n\n    if (!this.activeScreen) {\n      this.gl.blendFunc(this.gl.ONE, this.gl.ONE);\n\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.fogOfWar.framebuffer);\n      this.gl.viewport(0, 0, this.fogOfWar.width, this.fogOfWar.height);\n      this.lightCone.draw(this.gl, this.fogOfWar.projection, this.fogOfWar.view,\n        true);\n\n      this.gl.blendFunc(this.gl.ONE, this.gl.ZERO);\n\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,\n        this.postProcessor.framebuffer);\n      this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n      this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n      this.map.draw(this.gl, this.projection, this.view, true);\n\n      this.basicShader.use(this.gl);\n\n      this.gl.uniformMatrix4fv(this.basicShader.projection, false,\n        this.projection);\n      this.gl.uniformMatrix4fv(this.basicShader.view, false, this.view);\n\n      this.snakeCollection.draw(this);\n      this.collectibleGemCollection.draw(this);\n      this.collectibleHeartCollection.draw(this);\n      this.exit.draw(this.gl, this.basicShader);\n      this.player.draw(this.gl, this.textContext, this.basicShader);\n    } else {\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,\n        this.postProcessor.framebuffer);\n      this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n      this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    }\n\n    this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n\n    this.particleSystem.draw(this.gl, this.projection, this.view);\n\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,\n      this.guiPostProcessor.framebuffer);\n    this.gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n    if (this.activeScreen) {\n      this.activeScreen.draw(this.gl, this.textContext, this.basicShader,\n        this.projection, this.view);\n    } else {\n      this.heartCollection.draw(this.gl, this.basicShader, this.player);\n      this.gemCollection.draw(this.gl, this.basicShader, this.player);\n    }\n\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n    this.gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n    if (!this.activeScreen) {\n      this.map.draw(this.gl, this.projection, this.view, false);\n      this.lightCone.draw(this.gl, this.projection, this.view, false);\n      this.postProcessor.draw(this.gl);\n\n      this.gl.blendFunc(this.gl.ZERO, this.gl.SRC_ALPHA);\n      this.fogOfWar.draw(this.gl, this.projection, this.view);\n    } else {\n      this.postProcessor.draw(this.gl);\n    }\n\n    this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n\n    this.guiPostProcessor.draw(this.gl);\n\n    if (this.explanationTimer > 0 && !this.activeScreen) {\n      this.textContext.fillText('COLLECT THE GEMS',\n        SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2);\n      this.textContext.fillText('FIND THE EXIT',\n        SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2 + 48);\n    }\n  }\n}\n","import Game from './Game';\n\nconst game = new Game();\n\nconst updateGame = (timestamp) => {\n  requestAnimationFrame(updateGame);\n\n  game.update(timestamp);\n  game.draw();\n};\n\naddEventListener('keydown', event => {\n  switch (event.keyCode) {\n  case 38: case 87: case 75:\n    game.input.press(game.input.UP);\n    event.preventDefault();\n    break;\n  case 40: case 83: case 74:\n    game.input.press(game.input.DOWN);\n    event.preventDefault();\n    break;\n  case 37: case 65: case 72:\n    game.input.press(game.input.LEFT);\n    event.preventDefault();\n    break;\n  case 39: case 68: case 76:\n    game.input.press(game.input.RIGHT);\n    event.preventDefault();\n    break;\n  case 32: case 88: case 70:\n    game.input.press(game.input.ACTION);\n    event.preventDefault();\n    break;\n  }\n});\n\naddEventListener('keyup', event => {\n  switch (event.keyCode) {\n  case 38: case 87: case 75:\n    game.input.release(game.input.UP);\n    event.preventDefault();\n    break;\n  case 40: case 83: case 74:\n    game.input.release(game.input.DOWN);\n    event.preventDefault();\n    break;\n  case 37: case 65: case 72:\n    game.input.release(game.input.LEFT);\n    event.preventDefault();\n    break;\n  case 39: case 68: case 76:\n    game.input.release(game.input.RIGHT);\n    event.preventDefault();\n    break;\n  case 32: case 88: case 70:\n    game.input.release(game.input.ACTION);\n    event.preventDefault();\n    break;\n  }\n});\n\nrequestAnimationFrame(updateGame);\n","uniform mediump mat4 projection;\nuniform mediump mat4 view;\nuniform mediump mat4 model;\n\nattribute vec2 vertexPosition;\n\nvoid main() {\n  gl_Position = projection * view * model * vec4(vertexPosition, 0.0, 1.0);\n}\n","uniform mediump vec4 color;\n\nvoid main() {\n  gl_FragColor = color;\n}\n"],"names":["componentCount","type","parseShader","combinedShaders","pattern","matchResult","result","exec","push","name","components","Shader","constructor","gl","vertexShaderSource","fragmentShaderSource","this","uniforms","attributes","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","uniform","getUniformLocation","attribute","getAttribLocation","vertexSize","reduce","acc","use","useProgram","offset","enableVertexAttribArray","vertexAttribPointer","FLOAT","Input","UP","DOWN","LEFT","RIGHT","ACTION","pressed","lastPressed","justPressed","justReleased","press","key","release","isPressed","wasJustPressed","wasJustReleased","update","MIN_SIZE","MapNode","x","y","w","h","snakes","containsGem","containsHeart","containsExit","isLeaf","childA","childB","split","createRoom","splitHorizontally","splitVertically","Math","random","size","round","roomW","roomH","roomX","roomY","leafCount","visitLeaves","f","visitLeafPairs","leafA","leafB","getRandomLeaf","TILE_SIZE","Map","width","height","gridWidth","ceil","gridHeight","root","grid","Uint8Array","vertices","Float32Array","indices","Uint16Array","leaf","aCenterX","floor","aCenterY","bCenterX","bCenterY","corridorHalf","CORRIDOR_SIZE","sign","texture","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texImage2D","ALPHA","UNSIGNED_BYTE","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","indexBuffer","ELEMENT_ARRAY_BUFFER","shader","draw","projection","view","wallsOnly","uniformMatrix4fv","uniform4f","wallColor","roomColor","uniform1i","sampler","uniform2f","quadSize","drawElements","TRIANGLES","UNSIGNED_SHORT","tileAt","tile","getWallDistance","dirX","dirY","tileX","tileY","ix","iy","distTop","distBottom","distLeft","distRight","min","Sword","player","vertexIndex","enemiesHit","angle","PI","model","deltaTime","game","swingTimer","swingBaseAngle","endX","cos","endY","sin","particleAngle","i","particleDirX","particleDirY","particleSystem","emit","snake","snakeCollection","alive","dist1X","dist1Y","dist1","sqrt","dist2X","dist2Y","dist2","emitRandom","swing","color","drawArrays","Gem","scale","collected","distX","distY","collectGem","filled","LINES","BYTES_PER_ELEMENT","GemCollection","count","gems","lastFlashing","gemTimer","gemVisible","length","gem","VictoryScreen","gemCollection","particleTimer","actionTimer","input","reset","activeScreen","textContext","fillText","Heart","heartCollection","collectHeart","TRIANGLE_FAN","HEART_SEGMENTS","LINE_STRIP","HeartCollection","vertexX","abs","SQRT2","hearts","heartX","heartY","lives","invincibilityTimer","visible","newFlashing","newHeartTimer","newHeartVisible","heart","GameOverScreen","textTimer","showText","Player","PLAYER_SEGMENTS","flashTimer","slidingTimer","slidingX","slidingY","sword","gemFlashTimer","newHeartFlashTimer","exitTextVisible","validPosition","map","distance","atan2","newX","newY","damage","shake","basicShader","touchExit","LIGHT_CONE_SEGMENTS","LightCone","baseVertices","baseVertexBuffer","magnifiedVertices","magnifiedVertexBuffer","magnified","uniform3f","Snake","angleChange","charging","chargingTimer","speed","dist","SNAKE_WIDTH","SNAKE_SEGMENTS","SnakeCollection","SNAKE_HEIGHT","room","startingRoom","phase","chargingPhase","generateVertices","snakeX","cameraX","canvas","cameraY","CollectibleGemCollection","CollectibleHeartCollection","Exit","FogOfWar","RGBA","LINEAR","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","PostProcessor","texSize","MAX_PARTICLES","ParticleSystem","particles","nextParticle","particleCount","elapsedTime","dx","dy","r","g","b","minSpeed","maxSpeed","uniform1f","POINTS","NeonTitle","maxAlpha","start","end","startAlpha","endAlpha","startVertexIndex","endVertexIndex","startX","startY","progress","DungeonTitle","alpha","TitleScreen","neonTitle","dungeonTitle","SCREEN_WIDTH","SCREEN_HEIGHT","canvasContainer","document","createElement","id","body","appendChild","getContext","textCanvas","font","textAlign","fillStyle","clearColor","enable","BLEND","postProcessor","guiPostProcessor","lastTimestamp","performance","now","frames","frameTimer","collectibleGemCollection","collectibleHeartCollection","exit","lightCone","fogOfWar","shakeTimer","explanationTimer","timestamp","console","log","duration","clearRect","viewport","clear","COLOR_BUFFER_BIT","blendFunc","ONE","ZERO","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","updateGame","requestAnimationFrame","addEventListener","event","keyCode","preventDefault"],"mappings":"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"}